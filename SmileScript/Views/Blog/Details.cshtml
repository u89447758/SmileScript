@model SmileScript.ViewModels.BlogPostDetailViewModel
@using Markdig
@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager

@{
    ViewData["Title"] = Model.BlogPost.Title;
}

<div class="blog-post-container">
    <article>
        <!-- Post Header Section -->
        <header class="blog-post-header text-center">
            <h1 class="post-title">@Model.BlogPost.Title</h1>
            <div class="post-meta text-muted">
                <span>Posted on @Model.BlogPost.CreatedDate.ToString("MMMM dd, yyyy")</span>
                <span>by @Model.BlogPost.Author.Email</span>
                <span>in <a href="@Url.Action("Category", "Home", new { slug = Model.BlogPost.Category.Slug })" class="post-category-link">@Model.BlogPost.Category.Name</a></span>
            </div>
        </header>

        <!-- Optional Header Image -->
        @if (!string.IsNullOrEmpty(Model.BlogPost.HeaderImageUrl))
        {
            <figure class="blog-post-banner mb-4">
                <img class="img-fluid" src="@Model.BlogPost.HeaderImageUrl" alt="Header Image for @Model.BlogPost.Title" />
            </figure>
        }

        <!-- Post Content Section -->
        <section class="blog-post-body">
            @{
                // Using a pipeline with advanced extensions for better Markdown rendering (e.g., tables, footnotes)
                var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
                var htmlContent = Markdown.ToHtml(Model.BlogPost.Content ?? string.Empty, pipeline);
            }
            @Html.Raw(htmlContent)
        </section>
    </article>

    <!-- Comments Section -->
    <section class="blog-comments-section">
        <h3 class="mb-4">Comments (@Model.Comments.Count())</h3>
        <div class="card">
            <div class="card-body">
                <!-- Comment submission form -->
                @if (SignInManager.IsSignedIn(User))
                {
                    <form id="comment-form" asp-controller="Comments" asp-action="Create" method="post" class="mb-4">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="blogPostId" value="@Model.BlogPost.Id" />
                        <div class="form-group">
                            <textarea class="form-control" name="content" rows="3" placeholder="Join the discussion and leave a comment!"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary mt-2">Submit Comment</button>
                    </form>
                }
                else
                {
                    <div class="text-center mb-4">
                        <p>Please <a href="#" class="login-modal-trigger">log in</a> or <a href="#" class="register-modal-trigger">register</a> to post a comment.</p>
                    </div>
                }

                <!-- Comments list container -->
                <div id="comments-list">
                    @if (Model.Comments.Any())
                    {
                        foreach (var comment in Model.Comments)
                        {
                            <partial name="_CommentPartial" model="comment" />
                        }
                    }
                    else
                    {
                        <p id="no-comments-message">Be the first to comment!</p>
                    }
                </div>
            </div>
        </div>
    </section>
</div>


@section Scripts {
    <script>
        // Note: The existing AJAX script for comment submission remains unchanged and is fully compatible.
        $(document).ready(function () {
            var commentForm = $('#comment-form');

            commentForm.on('submit', function (e) {
                e.preventDefault();
                var formData = $(this).serialize();
                var formUrl = $(this).attr('action');

                $.ajax({
                    type: 'POST',
                    url: formUrl,
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            showToast(response.message, true);
                            commentForm.find('textarea').val('');
                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            showToast(response.message, false);
                        }
                    },
                    error: function () {
                        showToast('An unexpected error occurred. Please try again.', false);
                    }
                });
            });
        });
    </script>
}